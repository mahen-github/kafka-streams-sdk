buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = 'https://packages.confluent.io/maven/'
        }
        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://packages.confluent.io/maven/"
        }
        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.guava:guava:28.1-jre'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.9.0'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0"
        classpath "com.github.imflog:kafka-schema-registry-gradle-plugin:0.9.0"

    }
}
plugins {
    id 'java-library'
    id "maven-publish"
    id "com.jfrog.artifactory" version "4.13.0"
    id 'com.github.spotbugs' version '2.0.0' apply false
    id 'net.nemerosa.versioning' version '2.8.2'
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "0.9.0"

}
ext {
    //https://proton.vip.nordstrom.com/docs/faq.html#what-version-of-kafka-do-you-run
    confluentVersion = '5.4.1'
    kafkaVersion = '2.4.0'
    kstreamsVersion = '2.4.0'

    //NAP dependencies
    //Coding standards
    annotationsVersion = '18.0.0'
    checkstyleVersion = '8.24'
    jacocoVersion = "0.8.3"
    spotbugsVersion = '4.0.1'

    avroVersion = '1.9.1'
    commonsIoVersion = '2.6'
    commonsLangVersion = '3.9'
    gsonVersion = '2.8.5'
    guavaVersion = '28.1-jre'
    jacksonVersion = '1.9.13'
    jodaTimeVersion = '2.10.1'
    junitVersion = '5.3.2'
    jxpathVersion = '1.3'
    log4jVersion = '2.11.1'
    mockitoVersion = '3.2.4'
    picoCliVersion = '3.9.0'
    snappyVersion = '1.1.7.2'
}
apply plugin: 'checkstyle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.github.spotbugs'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "com.commercehub.gradle.plugin.avro-base"
apply plugin: "com.commercehub.gradle.plugin.avro"
apply plugin: "com.github.imflog.kafka-schema-registry-gradle-plugin"

group 'com.mahendran.kstreams'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven {
        url "http://packages.confluent.io/maven/"
    }
}

dependencies {
    implementation "io.confluent:kafka-avro-serializer:$confluentVersion"
    implementation "io.confluent:kafka-streams-avro-serde:$confluentVersion"
    implementation "org.apache.kafka:kafka-clients:$kstreamsVersion"
    implementation "org.apache.kafka:kafka-streams-test-utils:$kstreamsVersion"
    implementation "org.apache.kafka:kafka-streams:$kstreamsVersion"
    implementation "org.xerial.snappy:snappy-java:$snappyVersion"

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"
    compileOnly "org.jetbrains:annotations:$annotationsVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

checkstyle {
    toolVersion = "$checkstyleVersion"
    ignoreFailures = false
    showViolations = true
    maxWarnings = 0
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/suppressions.xml')]
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
    ignoreFailures = false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

javadoc {
    source = sourceSets.main.allJava
    options.addBooleanOption('html5', true)
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    reports.xml.enabled = false
    reports.csv.enabled = false
    reports.html.enabled = true
}

test.finalizedBy jacocoTestReport

versionFile {
    file = new File("$buildDir/generated-resources", "version.properties")
}

sourceSets {
    main {
        output.dir("$buildDir/generated-resources/version.properties", builtBy: versionFile)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
    }
}

jar {
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}